<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>User Management</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <link rel="icon" type="image/png" sizes="32x32" href="/bingo-logo.png">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      background-color: #f8f9fa;
      font-family: Arial, sans-serif;
      overflow: hidden;
    }

    .UserList-container {
      width: 100%;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      overflow-y: auto;
      height: calc(100vh - 60px);
      background-color: #f8f9fa;
    }

    .UserList-search-container {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
      position: sticky;
      top: 0;
      background-color: #f8f9fa;
      padding: 10px 0;
      z-index: 10;
    }

    .UserList-search-input {
      flex: 1;
      padding: 10px 15px;
      border-radius: 8px;
      border: 1px solid #dee2e6;
      font-size: 14px;
      transition: all 0.3s ease;
    }

    .UserList-search-input:focus {
      outline: none;
      border-color: #4361ee;
      box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
    }

    .UserList-search-btn {
      padding: 10px 15px;
      background-color: #4361ee;
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .UserList-search-btn:hover {
      background-color: #3a56d4;
    }

    .UserList-list-container {
      background-color: #ffffff;
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      width: 100%;
      border: 1px solid rgba(0, 0, 0, 0.08);
    }

    .UserList-header {
      font-size: 22px;
      font-weight: 600;
      margin-bottom: 20px;
      color: #212529;
      text-align: center;
      padding-bottom: 10px;
      position: relative;
    }

    .UserList-header::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
      width: 60px;
      height: 3px;
      background: linear-gradient(to right, #4361ee, #2ecc71);
      border-radius: 2px;
    }

    .UserList-header i {
      color: #4361ee;
      margin-right: 10px;
    }

    .UserList-card {
      background-color: #ffffff;
      border-radius: 10px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
      border-left: 4px solid #4361ee;
      position: relative;
    }

    .UserList-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    }

    .UserList-info {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 15px;
    }

    .UserList-info-item {
      display: flex;
      flex-direction: column;
    }

    .UserList-info-label {
      font-weight: 500;
      color: #6c757d;
      margin-bottom: 5px;
      font-size: 12px;
      text-transform: uppercase;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .UserList-info-label i {
      font-size: 12px;
      color: #4361ee;
    }

    .UserList-info-value {
      color: #212529;
      font-weight: 500;
      word-break: break-word;
      font-size: 14px;
    }

    .UserList-currency {
      font-weight: 600;
      color: #2ecc71;
    }

    .UserList-state-badge {
      padding: 5px 10px;
      border-radius: 50px;
      font-size: 12px;
      font-weight: 600;
      text-transform: capitalize;
      display: inline-flex;
      align-items: center;
      gap: 5px;
    }

    .UserList-state-badge.active {
      background-color: #e6f7ed;
      color: #2ecc71;
    }

    .UserList-state-badge.suspended {
      background-color: #fef0e6;
      color: #f4a261;
    }

    .UserList-state-badge.none {
      background-color: #f1f3f5;
      color: #6c757d;
    }

    .UserList-actions {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      margin-top: 15px;
      padding-top: 15px;
      border-top: 1px dashed #dee2e6;
      flex-wrap: wrap;
    }

    .UserList-actions button {
      padding: 8px 12px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 600;
      color: white;
      display: flex;
      align-items: center;
      gap: 5px;
      transition: all 0.3s ease;
      font-size: 12px;
      flex-grow: 1;
      justify-content: center;
    }

    .UserList-actions button i {
      font-size: 12px;
    }

    .UserList-actions .UserList-delete-btn {
      background-color: #ef233c;
    }

    .UserList-actions .UserList-delete-btn:hover {
      background-color: #dc1c33;
    }

    .UserList-actions .UserList-edit-btn {
      background-color: #4361ee;
    }

    .UserList-actions .UserList-edit-btn:hover {
      background-color: #3a56d4;
    }

    .UserList-actions .UserList-state-btn {
      background-color: #f4a261;
    }

    .UserList-actions .UserList-state-btn:hover {
      background-color: #e89352;
    }

    .UserList-update-form {
      display: none;
      margin-top: 15px;
      padding: 15px;
      border-radius: 8px;
      background-color: rgba(255, 255, 255, 0.9);
      box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.05);
      border: 1px solid rgba(0, 0, 0, 0.08);
    }

    .UserList-update-form.active {
      display: block;
      animation: UserList-fadeIn 0.3s ease;
    }

    @keyframes UserList-fadeIn {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .UserList-form-row {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    .UserList-form-group {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .UserList-form-group label {
      font-weight: 600;
      color: #343a40;
      font-size: 13px;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .UserList-form-group label i {
      font-size: 12px;
    }

    .UserList-input-wrapper {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .UserList-password-wrapper {
      position: relative;
    }

    .UserList-form-control {
      width: 100%;
      padding: 10px 12px;
      border-radius: 6px;
      border: 1px solid #dee2e6;
      font-size: 14px;
      transition: all 0.3s ease;
    }

    .UserList-form-control:focus {
      outline: none;
      border-color: #3a56d4;
      box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
    }

    .UserList-toggle-password {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: #6c757d;
      cursor: pointer;
    }

    .UserList-save-btn {
      background-color: #2ecc71;
      color: white;
      padding: 10px 15px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 5px;
      font-size: 13px;
    }

    .UserList-save-btn:hover {
      background-color: #28b865;
    }

    .UserList-save-btn i {
      font-size: 12px;
    }

    .UserList-no-users {
      text-align: center;
      color: #6c757d;
      padding: 30px;
      font-size: 16px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 10px;
    }

    .UserList-no-users i {
      font-size: 36px;
      color: #4361ee;
      opacity: 0.7;
    }

    .UserList-alert {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 12px 20px;
      border-radius: 8px;
      color: white;
      font-weight: 600;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      animation: UserList-fadeIn 0.3s ease;
      display: flex;
      align-items: center;
      gap: 10px;
      font-size: 14px;
    }

    .UserList-alert i {
      font-size: 16px;
    }

    .UserList-alert-success {
      background-color: #2ecc71;
    }

    .UserList-alert-error {
      background-color: #ef233c;
    }

    .UserList-modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 2000;
    }

    .UserList-modal {
      background-color: white;
      border-radius: 10px;
      padding: 20px;
      max-width: 400px;
      width: 90%;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      animation: UserList-modalFadeIn 0.3s ease-out;
    }

    @keyframes UserList-modalFadeIn {
      from {
        opacity: 0;
        transform: translateY(-15px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .UserList-modal-header {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 15px;
      color: #212529;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .UserList-modal-header i {
      color: #f4a261;
    }

    .UserList-modal-body {
      margin-bottom: 20px;
      color: #495057;
      line-height: 1.5;
      font-size: 14px;
    }

    .UserList-modal-footer {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
    }

    .UserList-modal-btn {
      padding: 8px 15px;
      border-radius: 6px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      border: none;
      font-size: 13px;
    }

    .UserList-modal-btn-cancel {
      background-color: #eceff1;
      color: #495057;
    }

    .UserList-modal-btn-cancel:hover {
      background-color: #e0e0e0;
    }

    .UserList-modal-btn-confirm {
      background-color: #f4a261;
      color: white;
    }

    .UserList-modal-btn-confirm:hover {
      background-color: #e89352;
    }

    /* Validation styles */
    .UserList-input-error {
      color: #ef233c;
      font-size: 12px;
      margin-top: 5px;
      display: none;
    }

    .UserList-form-control.error {
      border-color: #ef233c;
    }

    .UserList-form-control.valid {
      border-color: #2ecc71;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .UserList-info {
        grid-template-columns: 1fr 1fr;
      }

      .UserList-header {
        font-size: 20px;
      }

      .UserList-card {
        padding: 15px;
      }
    }

    @media (max-width: 480px) {
      .UserList-info {
        grid-template-columns: 1fr;
      }

      .UserList-search-container {
        flex-direction: column;
      }

      .UserList-actions button {
        padding: 8px;
        font-size: 11px;
      }

      .UserList-modal-footer {
        flex-direction: column;
      }

      .UserList-modal-btn {
        width: 100%;
      }
    }
  </style>
</head>

<body>
  <%- include('../Partials/SubAdminHeader') -%>
    <div class="UserList-container">
      <div class="UserList-search-container">
        <input type="text" id="UserListSearchInput" class="UserList-search-input" placeholder="Search users..."
          oninput="UserListSearchUsers()">
        <button class="UserList-search-btn" onclick="UserListSearchUsers()">
          <i class="fas fa-search"></i> Search
        </button>
      </div>

      <div id="UserListListContainer" class="UserList-list-container">
        <h2 class="UserList-header">
          <i class="fas fa-users"></i> User Management
        </h2>
        <div id="UserListList">
          <% if (users && users.length> 0) { %>
            <% users.forEach(user=> { %>
              <div class="UserList-card" data-name="<%= user.name.toLowerCase() %>"
                data-username="<%= user.username.toLowerCase() %>">
                <div class="UserList-info">
                  <div class="UserList-info-item">
                    <span class="UserList-info-label"><i class="fas fa-user"></i> Name:</span>
                    <span class="UserList-info-value">
                      <%= user.name %>
                    </span>
                  </div>
                  <div class="UserList-info-item">
                    <span class="UserList-info-label"><i class="fas fa-at"></i> Username:</span>
                    <span class="UserList-info-value">
                      <%= user.username %>
                    </span>
                  </div>
                  <div class="UserList-info-item">
                    <span class="UserList-info-label"><i class="fas fa-wallet"></i> Balance:</span>
                    <span class="UserList-info-value">
                      <span class="UserList-currency">
                        <%= user.balance %>
                      </span> ብር
                    </span>
                  </div>
                  <div class="UserList-info-item">
                    <span class="UserList-info-label"><i class="fas fa-credit-card"></i> Credit:</span>
                    <span class="UserList-info-value">
                      <span class="UserList-currency">
                        <%= user.credit %>
                      </span> ብር
                    </span>
                  </div>
                  <div class="UserList-info-item">
                    <span class="UserList-info-label"><i class="fas fa-coins"></i> Initial Balance:</span>
                    <span class="UserList-info-value">
                      <span class="UserList-currency">
                        <%= user.initial_balance || 0 %>
                      </span> ብር
                    </span>
                  </div>
                  <div class="UserList-info-item">
                    <span class="UserList-info-label"><i class="fas fa-percentage"></i> Owner Commission:</span>
                    <span class="UserList-info-value">
                      <%= user.owner_commission || 0 %>%
                    </span>
                  </div>
                  <div class="UserList-info-item">
                    <span class="UserList-info-label"><i class="fas fa-percent"></i> User Commission:</span>
                    <span class="UserList-info-value">
                      <%= user.user_commission || 0 %>%
                    </span>
                  </div>
                  <div class="UserList-info-item">
                    <span class="UserList-info-label"><i class="fas fa-power-off"></i> State:</span>
                    <span class="UserList-info-value">
                      <span class="UserList-state-badge <%= user.state ? user.state.toLowerCase() : 'none' %>">
                        <i
                          class="fas fa-<%= user.state === 'active' ? 'check-circle' : user.state === 'suspended' ? 'pause-circle' : 'minus-circle' %>"></i>
                        <%= user.state || 'none' %>
                      </span>
                    </span>
                  </div>
                  <div class="UserList-info-item">
                    <span class="UserList-info-label"><i class="far fa-calendar-alt"></i> Last Credit Time:</span>
                    <span class="UserList-info-value">
                      <%= user.lastCreditTime ? new Date(user.lastCreditTime).toLocaleString() : 'Never' %>
                    </span>
                  </div>
                  <div class="UserList-info-item">
                    <span class="UserList-info-label"><i class="far fa-calendar-alt"></i> Created At:</span>
                    <span class="UserList-info-value">
                      <%= new Date(user.createdAt).toLocaleDateString('en-US', { year: 'numeric' , month: 'long' ,
                        day: 'numeric' }) %>
                    </span>
                  </div>
                </div>

                <div class="UserList-actions">
                  <button class="UserList-edit-btn" onclick="UserListToggleUpdateForm('<%= user.uuid %>')">
                    <i class="fas fa-edit"></i> Edit
                  </button>
                  <button class="UserList-state-btn"
                    onclick="UserListShowStateModal('<%= user.uuid %>', '<%= user.state %>', '<%= user.name %>')">
                    <i class="fas fa-power-off"></i>
                    <%= user.state==='active' ? 'Suspend' : 'Activate' %>
                  </button>
                  <button class="UserList-delete-btn" onclick="UserListDeleteUser('<%= user.uuid %>')">
                    <i class="fas fa-trash-alt"></i> Delete
                  </button>
                </div>

                <div class="UserList-update-form" id="UserListUpdateForm-<%= user.uuid %>">
                  <div class="UserList-form-row">
                    <% ['name', 'username' , 'credit' , 'owner_commission' , 'user_commission' ].forEach(field=> { %>
                      <div class="UserList-form-group">
                        <label for="UserList-<%= field %>-<%= user.uuid %>">
                          <i
                            class="fas fa-<%= field === 'name' ? 'user' : 
                                                                   field === 'username' ? 'at' : 
                                                                   field === 'credit' ? 'credit-card' : 
                                                                   field.includes('owner') ? 'percentage' : 'percent' %>"></i>
                          <%= field.charAt(0).toUpperCase() + field.slice(1).replace('_', ' ' ) %>
                        </label>
                        <input type="<%= field === 'credit' || field.includes('commission') ? 'number' : 'text' %>"
                          id="UserList-<%= field %>-<%= user.uuid %>" class="UserList-form-control"
                          placeholder="Enter <%= field.replace('_', ' ') %>" value="<%= user[field] || '' %>"
                          <%=field.includes('commission') ? 'min="0" max="100" step="0.01"' : '' %>
                        oninput="UserListValidateInput('<%= user.uuid %>', '<%= field %>')">
                            <div class="UserList-input-error" id="UserList-<%= field %>-error-<%= user.uuid %>">
                              <% if (field==='name' || field==='username' ) { %>
                                <%= field.charAt(0).toUpperCase() + field.slice(1) %> must be at least 7 characters with
                                  no special characters
                                  <% } else if (field==='credit' ) { %>
                                    Credit must be a positive number
                                    <% } else { %>
                                      <%= field.replace('_', ' ' ).charAt(0).toUpperCase() + field.replace('_', ' '
                                        ).slice(1) %> must be between 0 and 100
                                        <% } %>
                            </div>
                            <button class="UserList-save-btn" id="UserListSaveBtn-<%= field %>-<%= user.uuid %>"
                              onclick="UserListUpdateUser('<%= user.uuid %>', '<%= field %>')" disabled>
                              <i class="fas fa-save"></i> Update
                            </button>
                      </div>
                      <% }) %>

                        <div class="UserList-form-group">
                          <label for="UserList-password-<%= user.uuid %>">
                            <i class="fas fa-lock"></i> Password
                          </label>
                          <div class="UserList-password-wrapper">
                            <input type="password" id="UserList-password-<%= user.uuid %>" class="UserList-form-control"
                              placeholder="Enter password (min 8 chars, 1 uppercase, 1 lowercase, 1 number)"
                              oninput="UserListValidateInput('<%= user.uuid %>', 'password')">
                            <button class="UserList-toggle-password"
                              onclick="UserListTogglePasswordVisibility('<%= user.uuid %>')">
                              <i class="fas fa-eye"></i>
                            </button>
                          </div>
                          <div class="UserList-input-error" id="UserList-password-error-<%= user.uuid %>">
                            Password must be at least 8 characters with 1 uppercase, 1 lowercase, and 1 number
                          </div>
                          <button class="UserList-save-btn" id="UserListSaveBtn-password-<%= user.uuid %>"
                            onclick="UserListUpdateUser('<%= user.uuid %>', 'password')" disabled>
                            <i class="fas fa-save"></i> Update
                          </button>
                        </div>
                  </div>
                </div>
              </div>
              <% }) %>
                <% } else { %>
                  <p class="UserList-no-users"><i class="fas fa-user-slash"></i> No users found</p>
                  <% } %>
        </div>
      </div>
    </div>

    <!-- State Confirmation Modal -->
    <div id="UserListStateModal" class="UserList-modal-overlay" style="display: none;">
      <div class="UserList-modal">
        <div class="UserList-modal-header">
          <i class="fas fa-exclamation-triangle"></i>
          <span id="UserListModalTitle">Confirm Action</span>
        </div>
        <div class="UserList-modal-body" id="UserListModalMessage">
          Are you sure you want to perform this action?
        </div>
        <div class="UserList-modal-footer">
          <button class="UserList-modal-btn UserList-modal-btn-cancel"
            onclick="UserListHideStateModal()">Cancel</button>
          <button class="UserList-modal-btn UserList-modal-btn-confirm" id="UserListConfirmStateBtn">Confirm</button>
        </div>
      </div>
    </div>

    <script>
      // Search function
      function UserListSearchUsers() {
        const searchTerm = document.getElementById('UserListSearchInput').value.toLowerCase().trim();
        const cards = document.querySelectorAll('.UserList-card');

        cards.forEach(card => {
          const name = card.getAttribute('data-name');
          const username = card.getAttribute('data-username');

          if (!searchTerm || name.includes(searchTerm) || username.includes(searchTerm)) {
            card.style.display = 'block';
          } else {
            card.style.display = 'none';
          }
        });
      }

      // Validate input fields with strict rules
      function UserListValidateInput(uuid, field) {
        const input = document.getElementById(`UserList-${field}-${uuid}`);
        const errorElement = document.getElementById(`UserList-${field}-error-${uuid}`);
        const saveBtn = document.getElementById(`UserListSaveBtn-${field}-${uuid}`);
        const value = input.value.trim();
        let isValid = false;

        // Reset styling
        input.classList.remove('error', 'valid');
        errorElement.style.display = 'none';

        if (field === 'password') {
          // Password: min 8 chars, 1 uppercase, 1 lowercase, 1 number, no special chars
          const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/;
          isValid = passwordRegex.test(value);
          if (!isValid && value.length > 0) {
            errorElement.style.display = 'block';
            input.classList.add('error');
          }
        } else if (field === 'name' || field === 'username') {
          // Name and username: min 7 chars, no special characters
          const nameRegex = /^[a-zA-Z0-9]{7,}$/;
          isValid = nameRegex.test(value);
          if (!isValid && value.length > 0) {
            errorElement.style.display = 'block';
            input.classList.add('error');
          }
        } else if (field === 'credit') {
          // Credit must be a valid positive number
          const numValue = parseFloat(value);
          isValid = !isNaN(numValue) && numValue >= 0;
          if (!isValid && value.length > 0) {
            errorElement.style.display = 'block';
            input.classList.add('error');
          }
        } else if (field.includes('commission')) {
          // Commission must be between 0 and 100
          const numValue = parseFloat(value);
          isValid = !isNaN(numValue) && numValue >= 0 && numValue <= 100;
          if (!isValid && value.length > 0) {
            errorElement.style.display = 'block';
            input.classList.add('error');
          }
        }

        if (isValid) {
          input.classList.add('valid');
        }

        saveBtn.disabled = !isValid || value === '';
      }

      // Toggle update form visibility
      function UserListToggleUpdateForm(uuid) {
        const form = document.getElementById(`UserListUpdateForm-${uuid}`);
        form.classList.toggle('active');

        // Close other open forms
        document.querySelectorAll('.UserList-update-form').forEach(f => {
          if (f.id !== `UserListUpdateForm-${uuid}`) {
            f.classList.remove('active');
          }
        });
      }

      // Toggle password visibility
      function UserListTogglePasswordVisibility(uuid) {
        const passwordInput = document.getElementById(`UserList-password-${uuid}`);
        const toggleBtn = passwordInput.nextElementSibling;

        if (passwordInput.type === 'password') {
          passwordInput.type = 'text';
          toggleBtn.innerHTML = '<i class="fas fa-eye-slash"></i>';
        } else {
          passwordInput.type = 'password';
          toggleBtn.innerHTML = '<i class="fas fa-eye"></i>';
        }
      }

      // Show state confirmation modal
      function UserListShowStateModal(uuid, currentState, userName) {
        const newState = currentState === 'active' ? 'suspended' : 'active';
        const modal = document.getElementById('UserListStateModal');
        const modalTitle = document.getElementById('UserListModalTitle');
        const modalMessage = document.getElementById('UserListModalMessage');
        const confirmBtn = document.getElementById('UserListConfirmStateBtn');

        modalTitle.textContent = `${newState === 'active' ? 'Activate' : 'Suspend'} User`;
        modalMessage.textContent = `Are you sure you want to ${newState === 'active' ? 'activate' : 'suspend'} user ${userName}?`;

        confirmBtn.onclick = function () {
          UserListToggleUserState(uuid, currentState);
          UserListHideStateModal();
        };

        modal.style.display = 'flex';
      }

      // Hide state confirmation modal
      function UserListHideStateModal() {
        document.getElementById('UserListStateModal').style.display = 'none';
      }

      // Toggle user state
      async function UserListToggleUserState(uuid, currentState) {
        const newState = currentState === 'active' ? 'suspended' : 'active';

        try {
          const response = await fetch(`/user/${uuid}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ state: newState })
          });

          if (response.ok) {
            UserListShowAlert('success', `User ${newState === 'active' ? 'activated' : 'suspended'} successfully`);
            setTimeout(() => location.reload(), 1500);
          } else {
            const result = await response.json();
            UserListShowAlert('error', result.message || 'State update failed');
          }
        } catch (error) {
          console.error('Error:', error);
          UserListShowAlert('error', 'An error occurred while updating state');
        }
      }

      // Update user
      async function UserListUpdateUser(uuid, field) {
        const inputElement = document.getElementById(`UserList-${field}-${uuid}`);
        const saveBtn = document.getElementById(`UserListSaveBtn-${field}-${uuid}`);
        let value = inputElement.value.trim();

        // Double-check validation
        UserListValidateInput(uuid, field);
        if (saveBtn.disabled) return;

        // Disable button during request
        saveBtn.disabled = true;
        saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';

        try {
          const res = await fetch(`/user/${uuid}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ [field]: field === 'credit' || field.includes('commission') ? parseFloat(value) : value }),
          });

          if (res.ok) {
            UserListShowAlert('success', 'User updated successfully');
            setTimeout(() => location.reload(), 1500);
          } else {
            const err = await res.json();
            UserListShowAlert('error', err.error || "Update failed");
            saveBtn.disabled = false;
            saveBtn.innerHTML = '<i class="fas fa-save"></i> Update';
          }
        } catch (error) {
          UserListShowAlert('error', 'Network error. Please try again.');
          saveBtn.disabled = false;
          saveBtn.innerHTML = '<i class="fas fa-save"></i> Update';
        }
      }

      // Delete user
      async function UserListDeleteUser(uuid) {
        if (!confirm("Are you sure you want to delete this user? This action cannot be undone.")) return;

        try {
          const res = await fetch(`/user/${uuid}`, { method: 'DELETE' });

          if (res.ok) {
            UserListShowAlert('success', 'User deleted successfully');
            setTimeout(() => location.reload(), 1500);
          } else {
            const err = await res.json();
            UserListShowAlert('error', err.error || "Delete failed");
          }
        } catch (error) {
          UserListShowAlert('error', 'Network error. Please try again.');
        }
      }

      // Show alert message
      function UserListShowAlert(type, message) {
        const existingAlert = document.querySelector('.UserList-alert');
        if (existingAlert) existingAlert.remove();

        const alertDiv = document.createElement('div');
        alertDiv.className = `UserList-alert UserList-alert-${type}`;
        alertDiv.innerHTML = `
                <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
                ${message}
            `;

        document.body.appendChild(alertDiv);

        setTimeout(() => {
          alertDiv.style.opacity = '0';
          setTimeout(() => alertDiv.remove(), 300);
        }, 3000);
      }

      // Initialize validation
      document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('[id^="UserList-"]').forEach(input => {
          if (input.id.includes('-password-')) {
            const uuid = input.id.split('-')[3];
            UserListValidateInput(uuid, 'password');
          } else if (input.id.includes('-name-') || input.id.includes('-username-') ||
            input.id.includes('-credit-') || input.id.includes('_commission-')) {
            const parts = input.id.split('-');
            const field = parts[1] + (parts[2] ? `-${parts[2]}` : '');
            const uuid = parts[3] || parts[2];
            UserListValidateInput(uuid, field);
          }
        });
      });
    </script>
</body>

</html>